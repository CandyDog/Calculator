
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1A7AD855898137D952A3127FFE330F89'
    
_lr_action_items = {'OROR':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,25,-22,25,25,25,-27,-23,25,25,-39,-40,25,-32,-33,25,-30,25,25,-28,25,-29,-31,25,-41,]),'RETURN':([0,2,3,7,11,12,15,20,28,38,39,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,76,79,81,82,85,86,],[1,-25,-4,-24,-26,1,-22,1,-21,-27,-19,-23,-14,-12,1,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,1,1,-18,-41,-20,-9,-14,-13,-3,-17,]),'NUMBER':([0,1,2,3,7,8,9,11,12,14,15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,79,81,82,85,86,],[7,7,-25,-4,-24,7,7,-26,7,7,-22,7,7,7,7,7,7,7,-21,7,7,7,7,7,7,7,7,7,-27,-19,7,-23,-14,-12,7,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,7,7,-18,-41,7,-20,-9,-14,-13,-3,-17,]),'TRUE':([0,1,2,3,7,8,9,11,12,14,15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,79,81,82,85,86,],[2,2,-25,-4,-24,2,2,-26,2,2,-22,2,2,2,2,2,2,2,-21,2,2,2,2,2,2,2,2,2,-27,-19,2,-23,-14,-12,2,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,2,2,-18,-41,2,-20,-9,-14,-13,-3,-17,]),'MINUS':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,36,-22,36,36,36,-27,-23,36,36,36,36,36,-32,36,36,-30,36,36,-28,36,-29,-31,36,-41,]),'COMMA':([2,7,11,15,38,42,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,74,],[-25,-24,-26,-22,-27,-23,75,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,77,-41,]),'RBRACE':([28,39,43,44,45,46,68,69,70,71,73,76,79,80,81,82,86,],[-21,-19,-14,-12,-11,-13,-15,-16,79,-11,-18,-20,-9,-10,-14,-13,-17,]),'LE':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,26,-22,26,26,26,-27,-23,26,26,-39,-40,26,-32,-33,26,-30,26,26,-28,26,-29,-31,26,-41,]),'RPAREN':([2,7,11,15,19,22,38,41,42,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,74,83,84,],[-25,-24,-26,-22,42,-43,-27,-6,-23,74,-42,-45,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-5,-8,78,-41,-44,-7,]),'SEMICOLON':([2,7,10,11,13,15,16,28,38,39,42,43,44,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,73,74,76,79,81,82,86,],[-25,-24,-22,-26,28,-22,39,-21,-27,-19,-23,68,-12,-13,73,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,76,-15,-16,-18,-41,-20,-9,68,-13,-17,]),'EQUEQU':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,29,-22,29,29,29,-27,-23,29,29,29,29,29,-32,-33,29,-30,29,29,-28,29,-29,-31,29,-41,]),'LT':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,32,-22,32,32,32,-27,-23,32,32,-39,-40,32,-32,-33,32,-30,32,32,-28,32,-29,-31,32,-41,]),'PLUS':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,34,-22,34,34,34,-27,-23,34,34,34,34,34,-32,34,34,-30,34,34,-28,34,-29,-31,34,-41,]),'NOTEQU':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,35,-22,35,35,35,-27,-23,35,35,-39,-40,35,-32,-33,35,-30,35,35,-28,35,-29,-31,35,-41,]),'IDENTIFIER':([0,1,2,3,5,6,7,8,9,11,12,14,15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,77,79,81,82,85,86,],[10,15,-25,-4,17,18,-24,15,15,-26,10,15,-22,10,15,15,15,15,15,15,-21,15,15,15,15,15,15,15,15,15,-27,-19,15,66,-23,-14,-12,10,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,10,10,-18,-41,15,-20,66,-9,-14,-13,-3,-17,]),'DEFINE':([0,2,3,7,11,12,15,20,28,38,39,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,76,79,81,82,85,86,],[5,-25,-4,-24,-26,5,-22,5,-21,-27,-19,-23,-14,-12,5,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,5,5,-18,-41,-20,-9,-14,-13,-3,-17,]),'FUNCTION':([0,3,12,28,39,43,44,46,68,69,73,76,79,81,82,85,86,],[6,-4,6,-21,-19,-14,-12,-13,-15,-16,-18,-20,-9,-14,-13,-3,-17,]),'GT':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,33,-22,33,33,33,-27,-23,33,33,-39,-40,33,-32,-33,33,-30,33,33,-28,33,-29,-31,33,-41,]),'DIVIDE':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,27,-22,27,27,27,-27,-23,27,27,27,27,27,-32,27,27,-30,27,27,27,27,27,-31,27,-41,]),'EQUAL':([10,17,],[21,40,]),'TIMES':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,31,-22,31,31,31,-27,-23,31,31,31,31,31,-32,31,31,-30,31,31,31,31,31,-31,31,-41,]),'GE':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,30,-22,30,30,30,-27,-23,30,30,-39,-40,30,-32,-33,30,-30,30,30,-28,30,-29,-31,30,-41,]),'LPAREN':([0,1,2,3,7,8,9,10,11,12,14,15,18,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,79,81,82,85,86,],[8,8,-25,-4,-24,8,8,22,-26,8,8,22,41,8,8,8,8,8,8,8,-21,8,8,8,8,8,8,8,8,8,-27,-19,8,-23,-14,-12,8,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,8,8,-18,-41,8,-20,-9,-14,-13,-3,-17,]),'ELSE':([46,79,],[72,-9,]),'IF':([0,2,3,7,11,12,15,20,28,38,39,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,76,79,81,82,85,86,],[9,-25,-4,-24,-26,9,-22,9,-21,-27,-19,-23,-14,-12,9,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,9,9,-18,-41,-20,-9,-14,-13,-3,-17,]),'ANDAND':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,24,-22,24,24,24,-27,-23,24,24,-39,24,24,-32,-33,24,-30,24,24,-28,24,-29,-31,24,-41,]),'LBRACE':([2,7,11,15,20,38,42,51,52,53,54,55,56,57,58,59,60,61,62,63,72,74,78,],[-25,-24,-26,-22,45,-27,-23,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,45,-41,45,]),'FALSE':([0,1,2,3,7,8,9,11,12,14,15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,79,81,82,85,86,],[11,11,-25,-4,-24,11,11,-26,11,11,-22,11,11,11,11,11,11,11,-21,11,11,11,11,11,11,11,11,11,-27,-19,11,-23,-14,-12,11,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,11,11,-18,-41,11,-20,-9,-14,-13,-3,-17,]),'NOT':([0,1,2,3,7,8,9,11,12,14,15,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,71,72,73,74,75,76,79,81,82,85,86,],[14,14,-25,-4,-24,14,14,-26,14,14,-22,14,14,14,14,14,14,14,-21,14,14,14,14,14,14,14,14,14,-27,-19,14,-23,-14,-12,14,-13,-39,-40,-35,-32,-33,-37,-30,-36,-38,-28,-34,-29,-31,-15,-16,14,14,-18,-41,14,-20,-9,-14,-13,-3,-17,]),'$end':([0,3,4,12,23,28,39,43,44,46,68,69,73,76,79,81,82,85,86,],[-2,-4,0,-2,-1,-21,-19,-14,-12,-13,-15,-16,-18,-20,-9,-14,-13,-3,-17,]),'MOD':([2,7,10,11,13,15,16,19,20,38,42,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,74,],[-25,-24,-22,-26,37,-22,37,37,37,-27,-23,37,37,37,37,37,-32,37,37,-30,37,37,37,37,37,-31,37,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt_or_compound':([20,72,],[43,81,]),'sstmt':([0,12,20,45,71,72,],[3,3,44,71,71,44,]),'optsemi':([43,81,],[69,86,]),'args':([22,75,],[49,83,]),'element':([0,12,],[12,12,]),'stmts':([45,71,],[70,80,]),'params':([41,77,],[65,84,]),'exp':([0,1,8,9,12,14,20,21,22,24,25,26,27,29,30,31,32,33,34,35,36,37,40,45,71,72,75,],[13,16,19,20,13,38,13,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,13,13,13,50,]),'calc':([0,12,],[4,23,]),'optparams':([41,],[67,]),'compoundstmt':([20,72,78,],[46,82,85,]),'optargs':([22,],[48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> element calc','calc',2,'p_calc','calcgrammar.py',17),
  ('calc -> <empty>','calc',0,'p_calc_empty','calcgrammar.py',20),
  ('element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',6,'p_element_function','calcgrammar.py',25),
  ('element -> sstmt','element',1,'p_element_sstmt','calcgrammar.py',28),
  ('optparams -> params','optparams',1,'p_optparams_params','calcgrammar.py',33),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','calcgrammar.py',36),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','calcgrammar.py',41),
  ('params -> IDENTIFIER','params',1,'p_params_one','calcgrammar.py',44),
  ('compoundstmt -> LBRACE stmts RBRACE','compoundstmt',3,'p_compoundstmt','calcgrammar.py',49),
  ('stmts -> sstmt stmts','stmts',2,'p_stmts','calcgrammar.py',54),
  ('stmts -> <empty>','stmts',0,'p_stmts_empty','calcgrammar.py',57),
  ('stmt_or_compound -> sstmt','stmt_or_compound',1,'p_stmt_or_compound','calcgrammar.py',62),
  ('stmt_or_compound -> compoundstmt','stmt_or_compound',1,'p_stmt_or_compound_c','calcgrammar.py',65),
  ('optsemi -> <empty>','optsemi',0,'p_optsemi_none','calcgrammar.py',71),
  ('optsemi -> SEMICOLON','optsemi',1,'p_optsemi_semicolon','calcgrammar.py',74),
  ('sstmt -> IF exp stmt_or_compound optsemi','sstmt',4,'p_sstmt_if','calcgrammar.py',80),
  ('sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi','sstmt',6,'p_sstmt_if_else','calcgrammar.py',83),
  ('sstmt -> IDENTIFIER EQUAL exp SEMICOLON','sstmt',4,'p_sstmt_assigment','calcgrammar.py',86),
  ('sstmt -> RETURN exp SEMICOLON','sstmt',3,'p_sstmt_return','calcgrammar.py',89),
  ('sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON','sstmt',5,'p_sstmt_define','calcgrammar.py',92),
  ('sstmt -> exp SEMICOLON','sstmt',2,'p_sstmt_exp','calcgrammar.py',95),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','calcgrammar.py',100),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_paren','calcgrammar.py',103),
  ('exp -> NUMBER','exp',1,'p_exp_number','calcgrammar.py',106),
  ('exp -> TRUE','exp',1,'p_exp_true','calcgrammar.py',109),
  ('exp -> FALSE','exp',1,'p_exp_false','calcgrammar.py',112),
  ('exp -> NOT exp','exp',2,'p_exp_not','calcgrammar.py',115),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','calcgrammar.py',118),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','calcgrammar.py',119),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','calcgrammar.py',120),
  ('exp -> exp MOD exp','exp',3,'p_exp_binop','calcgrammar.py',121),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','calcgrammar.py',122),
  ('exp -> exp EQUEQU exp','exp',3,'p_exp_binop','calcgrammar.py',123),
  ('exp -> exp NOTEQU exp','exp',3,'p_exp_binop','calcgrammar.py',124),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','calcgrammar.py',125),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','calcgrammar.py',126),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','calcgrammar.py',127),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','calcgrammar.py',128),
  ('exp -> exp ANDAND exp','exp',3,'p_exp_binop','calcgrammar.py',129),
  ('exp -> exp OROR exp','exp',3,'p_exp_binop','calcgrammar.py',130),
  ('exp -> IDENTIFIER LPAREN optargs RPAREN','exp',4,'p_exp_call','calcgrammar.py',133),
  ('optargs -> args','optargs',1,'p_optargs','calcgrammar.py',138),
  ('optargs -> <empty>','optargs',0,'p_optargs_empty','calcgrammar.py',141),
  ('args -> exp COMMA args','args',3,'p_args','calcgrammar.py',146),
  ('args -> exp','args',1,'p_args_one','calcgrammar.py',149),
]
