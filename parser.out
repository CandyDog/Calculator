Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> element calc
Rule 2     calc -> <empty>
Rule 3     element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 4     element -> sstmt
Rule 5     optparams -> params
Rule 6     optparams -> <empty>
Rule 7     params -> IDENTIFIER COMMA params
Rule 8     params -> IDENTIFIER
Rule 9     compoundstmt -> LBRACE stmts RBRACE
Rule 10    stmts -> sstmt stmts
Rule 11    stmts -> <empty>
Rule 12    stmt_or_compound -> sstmt
Rule 13    stmt_or_compound -> compoundstmt
Rule 14    optsemi -> <empty>
Rule 15    optsemi -> SEMICOLON
Rule 16    sstmt -> IF exp stmt_or_compound optsemi
Rule 17    sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi
Rule 18    sstmt -> IDENTIFIER EQUAL exp SEMICOLON
Rule 19    sstmt -> RETURN exp SEMICOLON
Rule 20    sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON
Rule 21    sstmt -> exp SEMICOLON
Rule 22    exp -> IDENTIFIER
Rule 23    exp -> LPAREN exp RPAREN
Rule 24    exp -> NUMBER
Rule 25    exp -> TRUE
Rule 26    exp -> FALSE
Rule 27    exp -> NOT exp
Rule 28    exp -> exp PLUS exp
Rule 29    exp -> exp MINUS exp
Rule 30    exp -> exp TIMES exp
Rule 31    exp -> exp MOD exp
Rule 32    exp -> exp DIVIDE exp
Rule 33    exp -> exp EQUEQU exp
Rule 34    exp -> exp NOTEQU exp
Rule 35    exp -> exp LE exp
Rule 36    exp -> exp LT exp
Rule 37    exp -> exp GE exp
Rule 38    exp -> exp GT exp
Rule 39    exp -> exp ANDAND exp
Rule 40    exp -> exp OROR exp
Rule 41    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 42    optargs -> args
Rule 43    optargs -> <empty>
Rule 44    args -> exp COMMA args
Rule 45    args -> exp

Terminals, with rules where they appear

ANDAND               : 39
COMMA                : 7 44
DEFINE               : 20
DIVIDE               : 32
ELSE                 : 17
EQUAL                : 18 20
EQUEQU               : 33
FALSE                : 26
FUNCTION             : 3
GE                   : 37
GT                   : 38
IDENTIFIER           : 3 7 8 18 20 22 41
IF                   : 16 17
LBRACE               : 9
LE                   : 35
LPAREN               : 3 23 41
LT                   : 36
MINUS                : 29
MOD                  : 31
NOT                  : 27
NOTEQU               : 34
NUMBER               : 24
OROR                 : 40
PLUS                 : 28
RBRACE               : 9
RETURN               : 19
RPAREN               : 3 23 41
SEMICOLON            : 15 18 19 20 21
TIMES                : 30
TRUE                 : 25
error                : 

Nonterminals, with rules where they appear

args                 : 42 44
calc                 : 1 0
compoundstmt         : 3 13 17
element              : 1
exp                  : 16 17 18 19 20 21 23 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 44 45
optargs              : 41
optparams            : 3
optsemi              : 16 17
params               : 5 7
sstmt                : 4 10 12
stmt_or_compound     : 16 17
stmts                : 9 10

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . element calc
    (2) calc -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . sstmt
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (calc -> .)
    FUNCTION        shift and go to state 6
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    sstmt                          shift and go to state 3
    element                        shift and go to state 12
    exp                            shift and go to state 13
    calc                           shift and go to state 4

state 1

    (19) sstmt -> RETURN . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 16

state 2

    (25) exp -> TRUE .

    SEMICOLON       reduce using rule 25 (exp -> TRUE .)
    PLUS            reduce using rule 25 (exp -> TRUE .)
    MINUS           reduce using rule 25 (exp -> TRUE .)
    TIMES           reduce using rule 25 (exp -> TRUE .)
    MOD             reduce using rule 25 (exp -> TRUE .)
    DIVIDE          reduce using rule 25 (exp -> TRUE .)
    EQUEQU          reduce using rule 25 (exp -> TRUE .)
    NOTEQU          reduce using rule 25 (exp -> TRUE .)
    LE              reduce using rule 25 (exp -> TRUE .)
    LT              reduce using rule 25 (exp -> TRUE .)
    GE              reduce using rule 25 (exp -> TRUE .)
    GT              reduce using rule 25 (exp -> TRUE .)
    ANDAND          reduce using rule 25 (exp -> TRUE .)
    OROR            reduce using rule 25 (exp -> TRUE .)
    RPAREN          reduce using rule 25 (exp -> TRUE .)
    LBRACE          reduce using rule 25 (exp -> TRUE .)
    IF              reduce using rule 25 (exp -> TRUE .)
    IDENTIFIER      reduce using rule 25 (exp -> TRUE .)
    RETURN          reduce using rule 25 (exp -> TRUE .)
    DEFINE          reduce using rule 25 (exp -> TRUE .)
    LPAREN          reduce using rule 25 (exp -> TRUE .)
    NUMBER          reduce using rule 25 (exp -> TRUE .)
    TRUE            reduce using rule 25 (exp -> TRUE .)
    FALSE           reduce using rule 25 (exp -> TRUE .)
    NOT             reduce using rule 25 (exp -> TRUE .)
    COMMA           reduce using rule 25 (exp -> TRUE .)


state 3

    (4) element -> sstmt .

    FUNCTION        reduce using rule 4 (element -> sstmt .)
    IF              reduce using rule 4 (element -> sstmt .)
    IDENTIFIER      reduce using rule 4 (element -> sstmt .)
    RETURN          reduce using rule 4 (element -> sstmt .)
    DEFINE          reduce using rule 4 (element -> sstmt .)
    LPAREN          reduce using rule 4 (element -> sstmt .)
    NUMBER          reduce using rule 4 (element -> sstmt .)
    TRUE            reduce using rule 4 (element -> sstmt .)
    FALSE           reduce using rule 4 (element -> sstmt .)
    NOT             reduce using rule 4 (element -> sstmt .)
    $end            reduce using rule 4 (element -> sstmt .)


state 4

    (0) S' -> calc .



state 5

    (20) sstmt -> DEFINE . IDENTIFIER EQUAL exp SEMICOLON

    IDENTIFIER      shift and go to state 17


state 6

    (3) element -> FUNCTION . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 18


state 7

    (24) exp -> NUMBER .

    SEMICOLON       reduce using rule 24 (exp -> NUMBER .)
    PLUS            reduce using rule 24 (exp -> NUMBER .)
    MINUS           reduce using rule 24 (exp -> NUMBER .)
    TIMES           reduce using rule 24 (exp -> NUMBER .)
    MOD             reduce using rule 24 (exp -> NUMBER .)
    DIVIDE          reduce using rule 24 (exp -> NUMBER .)
    EQUEQU          reduce using rule 24 (exp -> NUMBER .)
    NOTEQU          reduce using rule 24 (exp -> NUMBER .)
    LE              reduce using rule 24 (exp -> NUMBER .)
    LT              reduce using rule 24 (exp -> NUMBER .)
    GE              reduce using rule 24 (exp -> NUMBER .)
    GT              reduce using rule 24 (exp -> NUMBER .)
    ANDAND          reduce using rule 24 (exp -> NUMBER .)
    OROR            reduce using rule 24 (exp -> NUMBER .)
    RPAREN          reduce using rule 24 (exp -> NUMBER .)
    LBRACE          reduce using rule 24 (exp -> NUMBER .)
    IF              reduce using rule 24 (exp -> NUMBER .)
    IDENTIFIER      reduce using rule 24 (exp -> NUMBER .)
    RETURN          reduce using rule 24 (exp -> NUMBER .)
    DEFINE          reduce using rule 24 (exp -> NUMBER .)
    LPAREN          reduce using rule 24 (exp -> NUMBER .)
    NUMBER          reduce using rule 24 (exp -> NUMBER .)
    TRUE            reduce using rule 24 (exp -> NUMBER .)
    FALSE           reduce using rule 24 (exp -> NUMBER .)
    NOT             reduce using rule 24 (exp -> NUMBER .)
    COMMA           reduce using rule 24 (exp -> NUMBER .)


state 8

    (23) exp -> LPAREN . exp RPAREN
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 19

state 9

    (16) sstmt -> IF . exp stmt_or_compound optsemi
    (17) sstmt -> IF . exp compoundstmt ELSE stmt_or_compound optsemi
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 20

state 10

    (18) sstmt -> IDENTIFIER . EQUAL exp SEMICOLON
    (22) exp -> IDENTIFIER .
    (41) exp -> IDENTIFIER . LPAREN optargs RPAREN

    EQUAL           shift and go to state 21
    SEMICOLON       reduce using rule 22 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 22 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 22 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 22 (exp -> IDENTIFIER .)
    MOD             reduce using rule 22 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 22 (exp -> IDENTIFIER .)
    EQUEQU          reduce using rule 22 (exp -> IDENTIFIER .)
    NOTEQU          reduce using rule 22 (exp -> IDENTIFIER .)
    LE              reduce using rule 22 (exp -> IDENTIFIER .)
    LT              reduce using rule 22 (exp -> IDENTIFIER .)
    GE              reduce using rule 22 (exp -> IDENTIFIER .)
    GT              reduce using rule 22 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 22 (exp -> IDENTIFIER .)
    OROR            reduce using rule 22 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 22


state 11

    (26) exp -> FALSE .

    SEMICOLON       reduce using rule 26 (exp -> FALSE .)
    PLUS            reduce using rule 26 (exp -> FALSE .)
    MINUS           reduce using rule 26 (exp -> FALSE .)
    TIMES           reduce using rule 26 (exp -> FALSE .)
    MOD             reduce using rule 26 (exp -> FALSE .)
    DIVIDE          reduce using rule 26 (exp -> FALSE .)
    EQUEQU          reduce using rule 26 (exp -> FALSE .)
    NOTEQU          reduce using rule 26 (exp -> FALSE .)
    LE              reduce using rule 26 (exp -> FALSE .)
    LT              reduce using rule 26 (exp -> FALSE .)
    GE              reduce using rule 26 (exp -> FALSE .)
    GT              reduce using rule 26 (exp -> FALSE .)
    ANDAND          reduce using rule 26 (exp -> FALSE .)
    OROR            reduce using rule 26 (exp -> FALSE .)
    RPAREN          reduce using rule 26 (exp -> FALSE .)
    LBRACE          reduce using rule 26 (exp -> FALSE .)
    IF              reduce using rule 26 (exp -> FALSE .)
    IDENTIFIER      reduce using rule 26 (exp -> FALSE .)
    RETURN          reduce using rule 26 (exp -> FALSE .)
    DEFINE          reduce using rule 26 (exp -> FALSE .)
    LPAREN          reduce using rule 26 (exp -> FALSE .)
    NUMBER          reduce using rule 26 (exp -> FALSE .)
    TRUE            reduce using rule 26 (exp -> FALSE .)
    FALSE           reduce using rule 26 (exp -> FALSE .)
    NOT             reduce using rule 26 (exp -> FALSE .)
    COMMA           reduce using rule 26 (exp -> FALSE .)


state 12

    (1) calc -> element . calc
    (1) calc -> . element calc
    (2) calc -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . sstmt
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (calc -> .)
    FUNCTION        shift and go to state 6
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    sstmt                          shift and go to state 3
    element                        shift and go to state 12
    exp                            shift and go to state 13
    calc                           shift and go to state 23

state 13

    (21) sstmt -> exp . SEMICOLON
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       shift and go to state 28
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 14

    (27) exp -> NOT . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 38

state 15

    (22) exp -> IDENTIFIER .
    (41) exp -> IDENTIFIER . LPAREN optargs RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    SEMICOLON       reduce using rule 22 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 22 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 22 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 22 (exp -> IDENTIFIER .)
    MOD             reduce using rule 22 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 22 (exp -> IDENTIFIER .)
    EQUEQU          reduce using rule 22 (exp -> IDENTIFIER .)
    NOTEQU          reduce using rule 22 (exp -> IDENTIFIER .)
    LE              reduce using rule 22 (exp -> IDENTIFIER .)
    LT              reduce using rule 22 (exp -> IDENTIFIER .)
    GE              reduce using rule 22 (exp -> IDENTIFIER .)
    GT              reduce using rule 22 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 22 (exp -> IDENTIFIER .)
    OROR            reduce using rule 22 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 22 (exp -> IDENTIFIER .)
    LBRACE          reduce using rule 22 (exp -> IDENTIFIER .)
    IF              reduce using rule 22 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 22 (exp -> IDENTIFIER .)
    RETURN          reduce using rule 22 (exp -> IDENTIFIER .)
    DEFINE          reduce using rule 22 (exp -> IDENTIFIER .)
    NUMBER          reduce using rule 22 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 22 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 22 (exp -> IDENTIFIER .)
    NOT             reduce using rule 22 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 22 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 22

  ! LPAREN          [ reduce using rule 22 (exp -> IDENTIFIER .) ]


state 16

    (19) sstmt -> RETURN exp . SEMICOLON
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       shift and go to state 39
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 17

    (20) sstmt -> DEFINE IDENTIFIER . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 40


state 18

    (3) element -> FUNCTION IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 41


state 19

    (23) exp -> LPAREN exp . RPAREN
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    RPAREN          shift and go to state 42
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 20

    (16) sstmt -> IF exp . stmt_or_compound optsemi
    (17) sstmt -> IF exp . compoundstmt ELSE stmt_or_compound optsemi
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp
    (12) stmt_or_compound -> . sstmt
    (13) stmt_or_compound -> . compoundstmt
    (9) compoundstmt -> . LBRACE stmts RBRACE
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25
    LBRACE          shift and go to state 45
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    stmt_or_compound               shift and go to state 43
    sstmt                          shift and go to state 44
    exp                            shift and go to state 13
    compoundstmt                   shift and go to state 46

state 21

    (18) sstmt -> IDENTIFIER EQUAL . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 47

state 22

    (41) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (42) optargs -> . args
    (43) optargs -> .
    (44) args -> . exp COMMA args
    (45) args -> . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RPAREN          reduce using rule 43 (optargs -> .)
    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    args                           shift and go to state 49
    exp                            shift and go to state 50
    optargs                        shift and go to state 48

state 23

    (1) calc -> element calc .

    $end            reduce using rule 1 (calc -> element calc .)


state 24

    (39) exp -> exp ANDAND . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 51

state 25

    (40) exp -> exp OROR . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 52

state 26

    (35) exp -> exp LE . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 53

state 27

    (32) exp -> exp DIVIDE . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 54

state 28

    (21) sstmt -> exp SEMICOLON .

    IF              reduce using rule 21 (sstmt -> exp SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (sstmt -> exp SEMICOLON .)
    RETURN          reduce using rule 21 (sstmt -> exp SEMICOLON .)
    DEFINE          reduce using rule 21 (sstmt -> exp SEMICOLON .)
    LPAREN          reduce using rule 21 (sstmt -> exp SEMICOLON .)
    NUMBER          reduce using rule 21 (sstmt -> exp SEMICOLON .)
    TRUE            reduce using rule 21 (sstmt -> exp SEMICOLON .)
    FALSE           reduce using rule 21 (sstmt -> exp SEMICOLON .)
    NOT             reduce using rule 21 (sstmt -> exp SEMICOLON .)
    RBRACE          reduce using rule 21 (sstmt -> exp SEMICOLON .)
    FUNCTION        reduce using rule 21 (sstmt -> exp SEMICOLON .)
    $end            reduce using rule 21 (sstmt -> exp SEMICOLON .)
    SEMICOLON       reduce using rule 21 (sstmt -> exp SEMICOLON .)


state 29

    (33) exp -> exp EQUEQU . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 55

state 30

    (37) exp -> exp GE . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 56

state 31

    (30) exp -> exp TIMES . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 57

state 32

    (36) exp -> exp LT . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 58

state 33

    (38) exp -> exp GT . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 59

state 34

    (28) exp -> exp PLUS . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 60

state 35

    (34) exp -> exp NOTEQU . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 61

state 36

    (29) exp -> exp MINUS . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 62

state 37

    (31) exp -> exp MOD . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 63

state 38

    (27) exp -> NOT exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 27 (exp -> NOT exp .)
    PLUS            reduce using rule 27 (exp -> NOT exp .)
    MINUS           reduce using rule 27 (exp -> NOT exp .)
    TIMES           reduce using rule 27 (exp -> NOT exp .)
    MOD             reduce using rule 27 (exp -> NOT exp .)
    DIVIDE          reduce using rule 27 (exp -> NOT exp .)
    EQUEQU          reduce using rule 27 (exp -> NOT exp .)
    NOTEQU          reduce using rule 27 (exp -> NOT exp .)
    LE              reduce using rule 27 (exp -> NOT exp .)
    LT              reduce using rule 27 (exp -> NOT exp .)
    GE              reduce using rule 27 (exp -> NOT exp .)
    GT              reduce using rule 27 (exp -> NOT exp .)
    ANDAND          reduce using rule 27 (exp -> NOT exp .)
    OROR            reduce using rule 27 (exp -> NOT exp .)
    RPAREN          reduce using rule 27 (exp -> NOT exp .)
    LBRACE          reduce using rule 27 (exp -> NOT exp .)
    IF              reduce using rule 27 (exp -> NOT exp .)
    IDENTIFIER      reduce using rule 27 (exp -> NOT exp .)
    RETURN          reduce using rule 27 (exp -> NOT exp .)
    DEFINE          reduce using rule 27 (exp -> NOT exp .)
    LPAREN          reduce using rule 27 (exp -> NOT exp .)
    NUMBER          reduce using rule 27 (exp -> NOT exp .)
    TRUE            reduce using rule 27 (exp -> NOT exp .)
    FALSE           reduce using rule 27 (exp -> NOT exp .)
    NOT             reduce using rule 27 (exp -> NOT exp .)
    COMMA           reduce using rule 27 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 39

    (19) sstmt -> RETURN exp SEMICOLON .

    IF              reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    DEFINE          reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    LPAREN          reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    NUMBER          reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    RBRACE          reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    FUNCTION        reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    $end            reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)
    SEMICOLON       reduce using rule 19 (sstmt -> RETURN exp SEMICOLON .)


state 40

    (20) sstmt -> DEFINE IDENTIFIER EQUAL . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    exp                            shift and go to state 64

state 41

    (3) element -> FUNCTION IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (5) optparams -> . params
    (6) optparams -> .
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    RPAREN          reduce using rule 6 (optparams -> .)
    IDENTIFIER      shift and go to state 66

    params                         shift and go to state 65
    optparams                      shift and go to state 67

state 42

    (23) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    EQUEQU          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    NOTEQU          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    ANDAND          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    OROR            reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    IF              reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    IDENTIFIER      reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    DEFINE          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    NUMBER          reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    TRUE            reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    FALSE           reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    NOT             reduce using rule 23 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 23 (exp -> LPAREN exp RPAREN .)


state 43

    (16) sstmt -> IF exp stmt_or_compound . optsemi
    (14) optsemi -> .
    (15) optsemi -> . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    FUNCTION        reduce using rule 14 (optsemi -> .)
    IF              reduce using rule 14 (optsemi -> .)
    IDENTIFIER      reduce using rule 14 (optsemi -> .)
    RETURN          reduce using rule 14 (optsemi -> .)
    DEFINE          reduce using rule 14 (optsemi -> .)
    LPAREN          reduce using rule 14 (optsemi -> .)
    NUMBER          reduce using rule 14 (optsemi -> .)
    TRUE            reduce using rule 14 (optsemi -> .)
    FALSE           reduce using rule 14 (optsemi -> .)
    NOT             reduce using rule 14 (optsemi -> .)
    $end            reduce using rule 14 (optsemi -> .)
    RBRACE          reduce using rule 14 (optsemi -> .)
    SEMICOLON       shift and go to state 68

  ! SEMICOLON       [ reduce using rule 14 (optsemi -> .) ]

    optsemi                        shift and go to state 69

state 44

    (12) stmt_or_compound -> sstmt .

    SEMICOLON       reduce using rule 12 (stmt_or_compound -> sstmt .)
    FUNCTION        reduce using rule 12 (stmt_or_compound -> sstmt .)
    IF              reduce using rule 12 (stmt_or_compound -> sstmt .)
    IDENTIFIER      reduce using rule 12 (stmt_or_compound -> sstmt .)
    RETURN          reduce using rule 12 (stmt_or_compound -> sstmt .)
    DEFINE          reduce using rule 12 (stmt_or_compound -> sstmt .)
    LPAREN          reduce using rule 12 (stmt_or_compound -> sstmt .)
    NUMBER          reduce using rule 12 (stmt_or_compound -> sstmt .)
    TRUE            reduce using rule 12 (stmt_or_compound -> sstmt .)
    FALSE           reduce using rule 12 (stmt_or_compound -> sstmt .)
    NOT             reduce using rule 12 (stmt_or_compound -> sstmt .)
    $end            reduce using rule 12 (stmt_or_compound -> sstmt .)
    RBRACE          reduce using rule 12 (stmt_or_compound -> sstmt .)


state 45

    (9) compoundstmt -> LBRACE . stmts RBRACE
    (10) stmts -> . sstmt stmts
    (11) stmts -> .
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (stmts -> .)
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    stmts                          shift and go to state 70
    sstmt                          shift and go to state 71
    exp                            shift and go to state 13

state 46

    (17) sstmt -> IF exp compoundstmt . ELSE stmt_or_compound optsemi
    (13) stmt_or_compound -> compoundstmt .

    ELSE            shift and go to state 72
    SEMICOLON       reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    FUNCTION        reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    IF              reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    IDENTIFIER      reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    RETURN          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    DEFINE          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    LPAREN          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    NUMBER          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    TRUE            reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    FALSE           reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    NOT             reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    $end            reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    RBRACE          reduce using rule 13 (stmt_or_compound -> compoundstmt .)


state 47

    (18) sstmt -> IDENTIFIER EQUAL exp . SEMICOLON
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       shift and go to state 73
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 48

    (41) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 74


state 49

    (42) optargs -> args .

    RPAREN          reduce using rule 42 (optargs -> args .)


state 50

    (44) args -> exp . COMMA args
    (45) args -> exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    COMMA           shift and go to state 75
    RPAREN          reduce using rule 45 (args -> exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 51

    (39) exp -> exp ANDAND exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 39 (exp -> exp ANDAND exp .)
    NOTEQU          reduce using rule 39 (exp -> exp ANDAND exp .)
    LE              reduce using rule 39 (exp -> exp ANDAND exp .)
    LT              reduce using rule 39 (exp -> exp ANDAND exp .)
    GE              reduce using rule 39 (exp -> exp ANDAND exp .)
    GT              reduce using rule 39 (exp -> exp ANDAND exp .)
    ANDAND          reduce using rule 39 (exp -> exp ANDAND exp .)
    OROR            reduce using rule 39 (exp -> exp ANDAND exp .)
    RPAREN          reduce using rule 39 (exp -> exp ANDAND exp .)
    LBRACE          reduce using rule 39 (exp -> exp ANDAND exp .)
    IF              reduce using rule 39 (exp -> exp ANDAND exp .)
    IDENTIFIER      reduce using rule 39 (exp -> exp ANDAND exp .)
    RETURN          reduce using rule 39 (exp -> exp ANDAND exp .)
    DEFINE          reduce using rule 39 (exp -> exp ANDAND exp .)
    LPAREN          reduce using rule 39 (exp -> exp ANDAND exp .)
    NUMBER          reduce using rule 39 (exp -> exp ANDAND exp .)
    TRUE            reduce using rule 39 (exp -> exp ANDAND exp .)
    FALSE           reduce using rule 39 (exp -> exp ANDAND exp .)
    NOT             reduce using rule 39 (exp -> exp ANDAND exp .)
    COMMA           reduce using rule 39 (exp -> exp ANDAND exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29

  ! PLUS            [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! TIMES           [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! DIVIDE          [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! EQUEQU          [ reduce using rule 39 (exp -> exp ANDAND exp .) ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 52

    (40) exp -> exp OROR exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 40 (exp -> exp OROR exp .)
    NOTEQU          reduce using rule 40 (exp -> exp OROR exp .)
    LE              reduce using rule 40 (exp -> exp OROR exp .)
    LT              reduce using rule 40 (exp -> exp OROR exp .)
    GE              reduce using rule 40 (exp -> exp OROR exp .)
    GT              reduce using rule 40 (exp -> exp OROR exp .)
    OROR            reduce using rule 40 (exp -> exp OROR exp .)
    RPAREN          reduce using rule 40 (exp -> exp OROR exp .)
    LBRACE          reduce using rule 40 (exp -> exp OROR exp .)
    IF              reduce using rule 40 (exp -> exp OROR exp .)
    IDENTIFIER      reduce using rule 40 (exp -> exp OROR exp .)
    RETURN          reduce using rule 40 (exp -> exp OROR exp .)
    DEFINE          reduce using rule 40 (exp -> exp OROR exp .)
    LPAREN          reduce using rule 40 (exp -> exp OROR exp .)
    NUMBER          reduce using rule 40 (exp -> exp OROR exp .)
    TRUE            reduce using rule 40 (exp -> exp OROR exp .)
    FALSE           reduce using rule 40 (exp -> exp OROR exp .)
    NOT             reduce using rule 40 (exp -> exp OROR exp .)
    COMMA           reduce using rule 40 (exp -> exp OROR exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    ANDAND          shift and go to state 24

  ! PLUS            [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! MINUS           [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! TIMES           [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! MOD             [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! DIVIDE          [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! EQUEQU          [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! ANDAND          [ reduce using rule 40 (exp -> exp OROR exp .) ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! OROR            [ shift and go to state 25 ]


state 53

    (35) exp -> exp LE exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUEQU resolved as shift
  ! shift/reduce conflict for NOTEQU resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
    SEMICOLON       reduce using rule 35 (exp -> exp LE exp .)
    RPAREN          reduce using rule 35 (exp -> exp LE exp .)
    LBRACE          reduce using rule 35 (exp -> exp LE exp .)
    IF              reduce using rule 35 (exp -> exp LE exp .)
    IDENTIFIER      reduce using rule 35 (exp -> exp LE exp .)
    RETURN          reduce using rule 35 (exp -> exp LE exp .)
    DEFINE          reduce using rule 35 (exp -> exp LE exp .)
    LPAREN          reduce using rule 35 (exp -> exp LE exp .)
    NUMBER          reduce using rule 35 (exp -> exp LE exp .)
    TRUE            reduce using rule 35 (exp -> exp LE exp .)
    FALSE           reduce using rule 35 (exp -> exp LE exp .)
    NOT             reduce using rule 35 (exp -> exp LE exp .)
    COMMA           reduce using rule 35 (exp -> exp LE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25

  ! PLUS            [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! EQUEQU          [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! NOTEQU          [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! LE              [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! LT              [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! GE              [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! GT              [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! ANDAND          [ reduce using rule 35 (exp -> exp LE exp .) ]
  ! OROR            [ reduce using rule 35 (exp -> exp LE exp .) ]


state 54

    (32) exp -> exp DIVIDE exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 32 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 32 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 32 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 32 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 32 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 32 (exp -> exp DIVIDE exp .)
    EQUEQU          reduce using rule 32 (exp -> exp DIVIDE exp .)
    NOTEQU          reduce using rule 32 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 32 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 32 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 32 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 32 (exp -> exp DIVIDE exp .)
    ANDAND          reduce using rule 32 (exp -> exp DIVIDE exp .)
    OROR            reduce using rule 32 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 32 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 32 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 32 (exp -> exp DIVIDE exp .)
    IDENTIFIER      reduce using rule 32 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 32 (exp -> exp DIVIDE exp .)
    DEFINE          reduce using rule 32 (exp -> exp DIVIDE exp .)
    LPAREN          reduce using rule 32 (exp -> exp DIVIDE exp .)
    NUMBER          reduce using rule 32 (exp -> exp DIVIDE exp .)
    TRUE            reduce using rule 32 (exp -> exp DIVIDE exp .)
    FALSE           reduce using rule 32 (exp -> exp DIVIDE exp .)
    NOT             reduce using rule 32 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 32 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 55

    (33) exp -> exp EQUEQU exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 33 (exp -> exp EQUEQU exp .)
    EQUEQU          reduce using rule 33 (exp -> exp EQUEQU exp .)
    NOTEQU          reduce using rule 33 (exp -> exp EQUEQU exp .)
    LE              reduce using rule 33 (exp -> exp EQUEQU exp .)
    LT              reduce using rule 33 (exp -> exp EQUEQU exp .)
    GE              reduce using rule 33 (exp -> exp EQUEQU exp .)
    GT              reduce using rule 33 (exp -> exp EQUEQU exp .)
    ANDAND          reduce using rule 33 (exp -> exp EQUEQU exp .)
    OROR            reduce using rule 33 (exp -> exp EQUEQU exp .)
    RPAREN          reduce using rule 33 (exp -> exp EQUEQU exp .)
    LBRACE          reduce using rule 33 (exp -> exp EQUEQU exp .)
    IF              reduce using rule 33 (exp -> exp EQUEQU exp .)
    IDENTIFIER      reduce using rule 33 (exp -> exp EQUEQU exp .)
    RETURN          reduce using rule 33 (exp -> exp EQUEQU exp .)
    DEFINE          reduce using rule 33 (exp -> exp EQUEQU exp .)
    LPAREN          reduce using rule 33 (exp -> exp EQUEQU exp .)
    NUMBER          reduce using rule 33 (exp -> exp EQUEQU exp .)
    TRUE            reduce using rule 33 (exp -> exp EQUEQU exp .)
    FALSE           reduce using rule 33 (exp -> exp EQUEQU exp .)
    NOT             reduce using rule 33 (exp -> exp EQUEQU exp .)
    COMMA           reduce using rule 33 (exp -> exp EQUEQU exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27

  ! PLUS            [ reduce using rule 33 (exp -> exp EQUEQU exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp EQUEQU exp .) ]
  ! TIMES           [ reduce using rule 33 (exp -> exp EQUEQU exp .) ]
  ! MOD             [ reduce using rule 33 (exp -> exp EQUEQU exp .) ]
  ! DIVIDE          [ reduce using rule 33 (exp -> exp EQUEQU exp .) ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 56

    (37) exp -> exp GE exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUEQU resolved as shift
  ! shift/reduce conflict for NOTEQU resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
    SEMICOLON       reduce using rule 37 (exp -> exp GE exp .)
    RPAREN          reduce using rule 37 (exp -> exp GE exp .)
    LBRACE          reduce using rule 37 (exp -> exp GE exp .)
    IF              reduce using rule 37 (exp -> exp GE exp .)
    IDENTIFIER      reduce using rule 37 (exp -> exp GE exp .)
    RETURN          reduce using rule 37 (exp -> exp GE exp .)
    DEFINE          reduce using rule 37 (exp -> exp GE exp .)
    LPAREN          reduce using rule 37 (exp -> exp GE exp .)
    NUMBER          reduce using rule 37 (exp -> exp GE exp .)
    TRUE            reduce using rule 37 (exp -> exp GE exp .)
    FALSE           reduce using rule 37 (exp -> exp GE exp .)
    NOT             reduce using rule 37 (exp -> exp GE exp .)
    COMMA           reduce using rule 37 (exp -> exp GE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25

  ! PLUS            [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! TIMES           [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! EQUEQU          [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! NOTEQU          [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! LE              [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! LT              [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! GE              [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! GT              [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! ANDAND          [ reduce using rule 37 (exp -> exp GE exp .) ]
  ! OROR            [ reduce using rule 37 (exp -> exp GE exp .) ]


state 57

    (30) exp -> exp TIMES exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 30 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 30 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 30 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 30 (exp -> exp TIMES exp .)
    MOD             reduce using rule 30 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 30 (exp -> exp TIMES exp .)
    EQUEQU          reduce using rule 30 (exp -> exp TIMES exp .)
    NOTEQU          reduce using rule 30 (exp -> exp TIMES exp .)
    LE              reduce using rule 30 (exp -> exp TIMES exp .)
    LT              reduce using rule 30 (exp -> exp TIMES exp .)
    GE              reduce using rule 30 (exp -> exp TIMES exp .)
    GT              reduce using rule 30 (exp -> exp TIMES exp .)
    ANDAND          reduce using rule 30 (exp -> exp TIMES exp .)
    OROR            reduce using rule 30 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 30 (exp -> exp TIMES exp .)
    LBRACE          reduce using rule 30 (exp -> exp TIMES exp .)
    IF              reduce using rule 30 (exp -> exp TIMES exp .)
    IDENTIFIER      reduce using rule 30 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 30 (exp -> exp TIMES exp .)
    DEFINE          reduce using rule 30 (exp -> exp TIMES exp .)
    LPAREN          reduce using rule 30 (exp -> exp TIMES exp .)
    NUMBER          reduce using rule 30 (exp -> exp TIMES exp .)
    TRUE            reduce using rule 30 (exp -> exp TIMES exp .)
    FALSE           reduce using rule 30 (exp -> exp TIMES exp .)
    NOT             reduce using rule 30 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 30 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 58

    (36) exp -> exp LT exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUEQU resolved as shift
  ! shift/reduce conflict for NOTEQU resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
    SEMICOLON       reduce using rule 36 (exp -> exp LT exp .)
    RPAREN          reduce using rule 36 (exp -> exp LT exp .)
    LBRACE          reduce using rule 36 (exp -> exp LT exp .)
    IF              reduce using rule 36 (exp -> exp LT exp .)
    IDENTIFIER      reduce using rule 36 (exp -> exp LT exp .)
    RETURN          reduce using rule 36 (exp -> exp LT exp .)
    DEFINE          reduce using rule 36 (exp -> exp LT exp .)
    LPAREN          reduce using rule 36 (exp -> exp LT exp .)
    NUMBER          reduce using rule 36 (exp -> exp LT exp .)
    TRUE            reduce using rule 36 (exp -> exp LT exp .)
    FALSE           reduce using rule 36 (exp -> exp LT exp .)
    NOT             reduce using rule 36 (exp -> exp LT exp .)
    COMMA           reduce using rule 36 (exp -> exp LT exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25

  ! PLUS            [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! EQUEQU          [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! NOTEQU          [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! LE              [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! LT              [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! GE              [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! GT              [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! ANDAND          [ reduce using rule 36 (exp -> exp LT exp .) ]
  ! OROR            [ reduce using rule 36 (exp -> exp LT exp .) ]


state 59

    (38) exp -> exp GT exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUEQU resolved as shift
  ! shift/reduce conflict for NOTEQU resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
    SEMICOLON       reduce using rule 38 (exp -> exp GT exp .)
    RPAREN          reduce using rule 38 (exp -> exp GT exp .)
    LBRACE          reduce using rule 38 (exp -> exp GT exp .)
    IF              reduce using rule 38 (exp -> exp GT exp .)
    IDENTIFIER      reduce using rule 38 (exp -> exp GT exp .)
    RETURN          reduce using rule 38 (exp -> exp GT exp .)
    DEFINE          reduce using rule 38 (exp -> exp GT exp .)
    LPAREN          reduce using rule 38 (exp -> exp GT exp .)
    NUMBER          reduce using rule 38 (exp -> exp GT exp .)
    TRUE            reduce using rule 38 (exp -> exp GT exp .)
    FALSE           reduce using rule 38 (exp -> exp GT exp .)
    NOT             reduce using rule 38 (exp -> exp GT exp .)
    COMMA           reduce using rule 38 (exp -> exp GT exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25

  ! PLUS            [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! EQUEQU          [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! NOTEQU          [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! LE              [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! LT              [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! GE              [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! GT              [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! ANDAND          [ reduce using rule 38 (exp -> exp GT exp .) ]
  ! OROR            [ reduce using rule 38 (exp -> exp GT exp .) ]


state 60

    (28) exp -> exp PLUS exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 28 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 28 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 28 (exp -> exp PLUS exp .)
    EQUEQU          reduce using rule 28 (exp -> exp PLUS exp .)
    NOTEQU          reduce using rule 28 (exp -> exp PLUS exp .)
    LE              reduce using rule 28 (exp -> exp PLUS exp .)
    LT              reduce using rule 28 (exp -> exp PLUS exp .)
    GE              reduce using rule 28 (exp -> exp PLUS exp .)
    GT              reduce using rule 28 (exp -> exp PLUS exp .)
    ANDAND          reduce using rule 28 (exp -> exp PLUS exp .)
    OROR            reduce using rule 28 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 28 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 28 (exp -> exp PLUS exp .)
    IF              reduce using rule 28 (exp -> exp PLUS exp .)
    IDENTIFIER      reduce using rule 28 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 28 (exp -> exp PLUS exp .)
    DEFINE          reduce using rule 28 (exp -> exp PLUS exp .)
    LPAREN          reduce using rule 28 (exp -> exp PLUS exp .)
    NUMBER          reduce using rule 28 (exp -> exp PLUS exp .)
    TRUE            reduce using rule 28 (exp -> exp PLUS exp .)
    FALSE           reduce using rule 28 (exp -> exp PLUS exp .)
    NOT             reduce using rule 28 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 28 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27

  ! TIMES           [ reduce using rule 28 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 28 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 61

    (34) exp -> exp NOTEQU exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUEQU resolved as shift
  ! shift/reduce conflict for NOTEQU resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for ANDAND resolved as shift
  ! shift/reduce conflict for OROR resolved as shift
    SEMICOLON       reduce using rule 34 (exp -> exp NOTEQU exp .)
    RPAREN          reduce using rule 34 (exp -> exp NOTEQU exp .)
    LBRACE          reduce using rule 34 (exp -> exp NOTEQU exp .)
    IF              reduce using rule 34 (exp -> exp NOTEQU exp .)
    IDENTIFIER      reduce using rule 34 (exp -> exp NOTEQU exp .)
    RETURN          reduce using rule 34 (exp -> exp NOTEQU exp .)
    DEFINE          reduce using rule 34 (exp -> exp NOTEQU exp .)
    LPAREN          reduce using rule 34 (exp -> exp NOTEQU exp .)
    NUMBER          reduce using rule 34 (exp -> exp NOTEQU exp .)
    TRUE            reduce using rule 34 (exp -> exp NOTEQU exp .)
    FALSE           reduce using rule 34 (exp -> exp NOTEQU exp .)
    NOT             reduce using rule 34 (exp -> exp NOTEQU exp .)
    COMMA           reduce using rule 34 (exp -> exp NOTEQU exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25

  ! PLUS            [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! TIMES           [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! MOD             [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! DIVIDE          [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! EQUEQU          [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! NOTEQU          [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! LE              [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! LT              [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! GE              [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! GT              [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! ANDAND          [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]
  ! OROR            [ reduce using rule 34 (exp -> exp NOTEQU exp .) ]


state 62

    (29) exp -> exp MINUS exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 29 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 29 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 29 (exp -> exp MINUS exp .)
    EQUEQU          reduce using rule 29 (exp -> exp MINUS exp .)
    NOTEQU          reduce using rule 29 (exp -> exp MINUS exp .)
    LE              reduce using rule 29 (exp -> exp MINUS exp .)
    LT              reduce using rule 29 (exp -> exp MINUS exp .)
    GE              reduce using rule 29 (exp -> exp MINUS exp .)
    GT              reduce using rule 29 (exp -> exp MINUS exp .)
    ANDAND          reduce using rule 29 (exp -> exp MINUS exp .)
    OROR            reduce using rule 29 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 29 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 29 (exp -> exp MINUS exp .)
    IF              reduce using rule 29 (exp -> exp MINUS exp .)
    IDENTIFIER      reduce using rule 29 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 29 (exp -> exp MINUS exp .)
    DEFINE          reduce using rule 29 (exp -> exp MINUS exp .)
    LPAREN          reduce using rule 29 (exp -> exp MINUS exp .)
    NUMBER          reduce using rule 29 (exp -> exp MINUS exp .)
    TRUE            reduce using rule 29 (exp -> exp MINUS exp .)
    FALSE           reduce using rule 29 (exp -> exp MINUS exp .)
    NOT             reduce using rule 29 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 29 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27

  ! TIMES           [ reduce using rule 29 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 29 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 29 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 63

    (31) exp -> exp MOD exp .
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 31 (exp -> exp MOD exp .)
    PLUS            reduce using rule 31 (exp -> exp MOD exp .)
    MINUS           reduce using rule 31 (exp -> exp MOD exp .)
    TIMES           reduce using rule 31 (exp -> exp MOD exp .)
    MOD             reduce using rule 31 (exp -> exp MOD exp .)
    DIVIDE          reduce using rule 31 (exp -> exp MOD exp .)
    EQUEQU          reduce using rule 31 (exp -> exp MOD exp .)
    NOTEQU          reduce using rule 31 (exp -> exp MOD exp .)
    LE              reduce using rule 31 (exp -> exp MOD exp .)
    LT              reduce using rule 31 (exp -> exp MOD exp .)
    GE              reduce using rule 31 (exp -> exp MOD exp .)
    GT              reduce using rule 31 (exp -> exp MOD exp .)
    ANDAND          reduce using rule 31 (exp -> exp MOD exp .)
    OROR            reduce using rule 31 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 31 (exp -> exp MOD exp .)
    LBRACE          reduce using rule 31 (exp -> exp MOD exp .)
    IF              reduce using rule 31 (exp -> exp MOD exp .)
    IDENTIFIER      reduce using rule 31 (exp -> exp MOD exp .)
    RETURN          reduce using rule 31 (exp -> exp MOD exp .)
    DEFINE          reduce using rule 31 (exp -> exp MOD exp .)
    LPAREN          reduce using rule 31 (exp -> exp MOD exp .)
    NUMBER          reduce using rule 31 (exp -> exp MOD exp .)
    TRUE            reduce using rule 31 (exp -> exp MOD exp .)
    FALSE           reduce using rule 31 (exp -> exp MOD exp .)
    NOT             reduce using rule 31 (exp -> exp MOD exp .)
    COMMA           reduce using rule 31 (exp -> exp MOD exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 37 ]
  ! DIVIDE          [ shift and go to state 27 ]
  ! EQUEQU          [ shift and go to state 29 ]
  ! NOTEQU          [ shift and go to state 35 ]
  ! LE              [ shift and go to state 26 ]
  ! LT              [ shift and go to state 32 ]
  ! GE              [ shift and go to state 30 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 24 ]
  ! OROR            [ shift and go to state 25 ]


state 64

    (20) sstmt -> DEFINE IDENTIFIER EQUAL exp . SEMICOLON
    (28) exp -> exp . PLUS exp
    (29) exp -> exp . MINUS exp
    (30) exp -> exp . TIMES exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . DIVIDE exp
    (33) exp -> exp . EQUEQU exp
    (34) exp -> exp . NOTEQU exp
    (35) exp -> exp . LE exp
    (36) exp -> exp . LT exp
    (37) exp -> exp . GE exp
    (38) exp -> exp . GT exp
    (39) exp -> exp . ANDAND exp
    (40) exp -> exp . OROR exp

    SEMICOLON       shift and go to state 76
    PLUS            shift and go to state 34
    MINUS           shift and go to state 36
    TIMES           shift and go to state 31
    MOD             shift and go to state 37
    DIVIDE          shift and go to state 27
    EQUEQU          shift and go to state 29
    NOTEQU          shift and go to state 35
    LE              shift and go to state 26
    LT              shift and go to state 32
    GE              shift and go to state 30
    GT              shift and go to state 33
    ANDAND          shift and go to state 24
    OROR            shift and go to state 25


state 65

    (5) optparams -> params .

    RPAREN          reduce using rule 5 (optparams -> params .)


state 66

    (7) params -> IDENTIFIER . COMMA params
    (8) params -> IDENTIFIER .

    COMMA           shift and go to state 77
    RPAREN          reduce using rule 8 (params -> IDENTIFIER .)


state 67

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 78


state 68

    (15) optsemi -> SEMICOLON .

    FUNCTION        reduce using rule 15 (optsemi -> SEMICOLON .)
    IF              reduce using rule 15 (optsemi -> SEMICOLON .)
    IDENTIFIER      reduce using rule 15 (optsemi -> SEMICOLON .)
    RETURN          reduce using rule 15 (optsemi -> SEMICOLON .)
    DEFINE          reduce using rule 15 (optsemi -> SEMICOLON .)
    LPAREN          reduce using rule 15 (optsemi -> SEMICOLON .)
    NUMBER          reduce using rule 15 (optsemi -> SEMICOLON .)
    TRUE            reduce using rule 15 (optsemi -> SEMICOLON .)
    FALSE           reduce using rule 15 (optsemi -> SEMICOLON .)
    NOT             reduce using rule 15 (optsemi -> SEMICOLON .)
    $end            reduce using rule 15 (optsemi -> SEMICOLON .)
    SEMICOLON       reduce using rule 15 (optsemi -> SEMICOLON .)
    RBRACE          reduce using rule 15 (optsemi -> SEMICOLON .)


state 69

    (16) sstmt -> IF exp stmt_or_compound optsemi .

    IF              reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    IDENTIFIER      reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    RETURN          reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    DEFINE          reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    LPAREN          reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    NUMBER          reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    TRUE            reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    FALSE           reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    NOT             reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    RBRACE          reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    FUNCTION        reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    $end            reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)
    SEMICOLON       reduce using rule 16 (sstmt -> IF exp stmt_or_compound optsemi .)


state 70

    (9) compoundstmt -> LBRACE stmts . RBRACE

    RBRACE          shift and go to state 79


state 71

    (10) stmts -> sstmt . stmts
    (10) stmts -> . sstmt stmts
    (11) stmts -> .
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (stmts -> .)
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    sstmt                          shift and go to state 71
    stmts                          shift and go to state 80
    exp                            shift and go to state 13

state 72

    (17) sstmt -> IF exp compoundstmt ELSE . stmt_or_compound optsemi
    (12) stmt_or_compound -> . sstmt
    (13) stmt_or_compound -> . compoundstmt
    (16) sstmt -> . IF exp stmt_or_compound optsemi
    (17) sstmt -> . IF exp compoundstmt ELSE stmt_or_compound optsemi
    (18) sstmt -> . IDENTIFIER EQUAL exp SEMICOLON
    (19) sstmt -> . RETURN exp SEMICOLON
    (20) sstmt -> . DEFINE IDENTIFIER EQUAL exp SEMICOLON
    (21) sstmt -> . exp SEMICOLON
    (9) compoundstmt -> . LBRACE stmts RBRACE
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 10
    RETURN          shift and go to state 1
    DEFINE          shift and go to state 5
    LBRACE          shift and go to state 45
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    stmt_or_compound               shift and go to state 81
    sstmt                          shift and go to state 44
    exp                            shift and go to state 13
    compoundstmt                   shift and go to state 82

state 73

    (18) sstmt -> IDENTIFIER EQUAL exp SEMICOLON .

    IF              reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    DEFINE          reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    LPAREN          reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    NUMBER          reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    TRUE            reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    FALSE           reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    NOT             reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    $end            reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 18 (sstmt -> IDENTIFIER EQUAL exp SEMICOLON .)


state 74

    (41) exp -> IDENTIFIER LPAREN optargs RPAREN .

    SEMICOLON       reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    PLUS            reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MOD             reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQUEQU          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NOTEQU          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ANDAND          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    OROR            reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    IF              reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    IDENTIFIER      reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RETURN          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DEFINE          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LPAREN          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NUMBER          reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TRUE            reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    FALSE           reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NOT             reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 41 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 75

    (44) args -> exp COMMA . args
    (44) args -> . exp COMMA args
    (45) args -> . exp
    (22) exp -> . IDENTIFIER
    (23) exp -> . LPAREN exp RPAREN
    (24) exp -> . NUMBER
    (25) exp -> . TRUE
    (26) exp -> . FALSE
    (27) exp -> . NOT exp
    (28) exp -> . exp PLUS exp
    (29) exp -> . exp MINUS exp
    (30) exp -> . exp TIMES exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp DIVIDE exp
    (33) exp -> . exp EQUEQU exp
    (34) exp -> . exp NOTEQU exp
    (35) exp -> . exp LE exp
    (36) exp -> . exp LT exp
    (37) exp -> . exp GE exp
    (38) exp -> . exp GT exp
    (39) exp -> . exp ANDAND exp
    (40) exp -> . exp OROR exp
    (41) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 15
    LPAREN          shift and go to state 8
    NUMBER          shift and go to state 7
    TRUE            shift and go to state 2
    FALSE           shift and go to state 11
    NOT             shift and go to state 14

    args                           shift and go to state 83
    exp                            shift and go to state 50

state 76

    (20) sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .

    IF              reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    DEFINE          reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    LPAREN          reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    NUMBER          reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    TRUE            reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    FALSE           reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    NOT             reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    FUNCTION        reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    $end            reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 20 (sstmt -> DEFINE IDENTIFIER EQUAL exp SEMICOLON .)


state 77

    (7) params -> IDENTIFIER COMMA . params
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    IDENTIFIER      shift and go to state 66

    params                         shift and go to state 84

state 78

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (9) compoundstmt -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 45

    compoundstmt                   shift and go to state 85

state 79

    (9) compoundstmt -> LBRACE stmts RBRACE .

    FUNCTION        reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    IF              reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    IDENTIFIER      reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    RETURN          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    DEFINE          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    LPAREN          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    NUMBER          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    TRUE            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    FALSE           reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    NOT             reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    $end            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    SEMICOLON       reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    RBRACE          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    ELSE            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)


state 80

    (10) stmts -> sstmt stmts .

    RBRACE          reduce using rule 10 (stmts -> sstmt stmts .)


state 81

    (17) sstmt -> IF exp compoundstmt ELSE stmt_or_compound . optsemi
    (14) optsemi -> .
    (15) optsemi -> . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    FUNCTION        reduce using rule 14 (optsemi -> .)
    IF              reduce using rule 14 (optsemi -> .)
    IDENTIFIER      reduce using rule 14 (optsemi -> .)
    RETURN          reduce using rule 14 (optsemi -> .)
    DEFINE          reduce using rule 14 (optsemi -> .)
    LPAREN          reduce using rule 14 (optsemi -> .)
    NUMBER          reduce using rule 14 (optsemi -> .)
    TRUE            reduce using rule 14 (optsemi -> .)
    FALSE           reduce using rule 14 (optsemi -> .)
    NOT             reduce using rule 14 (optsemi -> .)
    $end            reduce using rule 14 (optsemi -> .)
    RBRACE          reduce using rule 14 (optsemi -> .)
    SEMICOLON       shift and go to state 68

  ! SEMICOLON       [ reduce using rule 14 (optsemi -> .) ]

    optsemi                        shift and go to state 86

state 82

    (13) stmt_or_compound -> compoundstmt .

    SEMICOLON       reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    FUNCTION        reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    IF              reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    IDENTIFIER      reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    RETURN          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    DEFINE          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    LPAREN          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    NUMBER          reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    TRUE            reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    FALSE           reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    NOT             reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    $end            reduce using rule 13 (stmt_or_compound -> compoundstmt .)
    RBRACE          reduce using rule 13 (stmt_or_compound -> compoundstmt .)


state 83

    (44) args -> exp COMMA args .

    RPAREN          reduce using rule 44 (args -> exp COMMA args .)


state 84

    (7) params -> IDENTIFIER COMMA params .

    RPAREN          reduce using rule 7 (params -> IDENTIFIER COMMA params .)


state 85

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    FUNCTION        reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    DEFINE          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    LPAREN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NUMBER          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    TRUE            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FALSE           reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NOT             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)


state 86

    (17) sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .

    IF              reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    IDENTIFIER      reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    RETURN          reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    DEFINE          reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    LPAREN          reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    NUMBER          reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    TRUE            reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    FALSE           reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    NOT             reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    RBRACE          reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    FUNCTION        reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    $end            reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)
    SEMICOLON       reduce using rule 17 (sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for MOD in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUEQU in state 53 resolved as shift
WARNING: shift/reduce conflict for NOTEQU in state 53 resolved as shift
WARNING: shift/reduce conflict for LE in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GE in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 53 resolved as shift
WARNING: shift/reduce conflict for OROR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 56 resolved as shift
WARNING: shift/reduce conflict for MOD in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUEQU in state 56 resolved as shift
WARNING: shift/reduce conflict for NOTEQU in state 56 resolved as shift
WARNING: shift/reduce conflict for LE in state 56 resolved as shift
WARNING: shift/reduce conflict for LT in state 56 resolved as shift
WARNING: shift/reduce conflict for GE in state 56 resolved as shift
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 56 resolved as shift
WARNING: shift/reduce conflict for OROR in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for MOD in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUEQU in state 58 resolved as shift
WARNING: shift/reduce conflict for NOTEQU in state 58 resolved as shift
WARNING: shift/reduce conflict for LE in state 58 resolved as shift
WARNING: shift/reduce conflict for LT in state 58 resolved as shift
WARNING: shift/reduce conflict for GE in state 58 resolved as shift
WARNING: shift/reduce conflict for GT in state 58 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 58 resolved as shift
WARNING: shift/reduce conflict for OROR in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for MOD in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUEQU in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQU in state 59 resolved as shift
WARNING: shift/reduce conflict for LE in state 59 resolved as shift
WARNING: shift/reduce conflict for LT in state 59 resolved as shift
WARNING: shift/reduce conflict for GE in state 59 resolved as shift
WARNING: shift/reduce conflict for GT in state 59 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 59 resolved as shift
WARNING: shift/reduce conflict for OROR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for MOD in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUEQU in state 61 resolved as shift
WARNING: shift/reduce conflict for NOTEQU in state 61 resolved as shift
WARNING: shift/reduce conflict for LE in state 61 resolved as shift
WARNING: shift/reduce conflict for LT in state 61 resolved as shift
WARNING: shift/reduce conflict for GE in state 61 resolved as shift
WARNING: shift/reduce conflict for GT in state 61 resolved as shift
WARNING: shift/reduce conflict for ANDAND in state 61 resolved as shift
WARNING: shift/reduce conflict for OROR in state 61 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 81 resolved as shift
